name: 'ü§ñ Merge Bot: Validate and Merge Data PRs'

on:
  workflow_dispatch:
  schedule:
    # Run once every hour
    - cron: '0 * * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-and-merge:
    # IMPORTANT: Change this to your repository to prevent the action from running on forks.
    if: github.repository == 'v1nvn/enhansome-registry'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate and Merge Pull Requests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e # Exit immediately if a command fails

          echo "Fetching open PRs..."
          # Get the list of open PR numbers
          PR_NUMBERS=$(gh pr list --state open --json number -q '.[].number')

          if [ -z "$PR_NUMBERS" ]; then
            echo "No open PRs found. Exiting."
            exit 0
          fi

          echo "Found PRs: $PR_NUMBERS"

          for PR_NUM in $PR_NUMBERS; do
            echo "---"
            echo "Processing PR #$PR_NUM..."

            # Get PR metadata
            PR_BRANCH=$(gh pr view $PR_NUM --json headRefName -q '.headRefName')
            
            # --- VALIDATION 1: Check if source repo is in allowlist ---
            # Branch name format is expected to be 'enhansome-update/owner-repo'
            if [[ "$PR_BRANCH" != enhansome-update/* ]]; then
              echo "Validation FAILED: Branch '$PR_BRANCH' does not match the expected format 'enhansome-update/owner-repo'."
              gh pr comment $PR_NUM --body "‚ùå **Validation Failed:** The branch name \`$PR_BRANCH\` is invalid. Expected format: \`enhansome-update/owner-repo\`."
              gh pr edit $PR_NUM --add-label "validation-failed"
              continue # Move to the next PR
            fi

            SOURCE_REPO=$(echo "$PR_BRANCH" | sed 's|enhansome-update/||' | sed 's|-|/|')
            echo "Source repo identified as: $SOURCE_REPO"

            if ! grep -qxF "$SOURCE_REPO" allowlist.txt; then
              echo "Validation FAILED: Source repo '$SOURCE_REPO' is not in allowlist.txt."
              gh pr comment $PR_NUM --body "‚ùå **Validation Failed:** The source repository \`$SOURCE_REPO\` is not found in the \`allowlist.txt\`."
              gh pr edit $PR_NUM --add-label "validation-failed"
              continue
            fi
            echo "‚úÖ Validation PASSED: Source repo is in allowlist."

            # --- VALIDATION 2 & 3: Check for single file change in /data directory ---
            FILES_CHANGED=$(gh pr diff $PR_NUM --name-only)
            NUM_FILES=$(echo "$FILES_CHANGED" | wc -l)

            if [ "$NUM_FILES" -ne 1 ]; then
              echo "Validation FAILED: PR modifies $NUM_FILES files, but should only modify one."
              gh pr comment $PR_NUM --body "‚ùå **Validation Failed:** This PR modifies multiple files. Only a single JSON file is allowed."
              gh pr edit $PR_NUM --add-label "validation-failed"
              continue
            fi

            if [[ "$FILES_CHANGED" != data/* ]]; then
              echo "Validation FAILED: File '$FILES_CHANGED' is not in the /data/ directory."
              gh pr comment $PR_NUM --body "‚ùå **Validation Failed:** The modified file \`$FILES_CHANGED\` must be inside the \`/data/\` directory."
              gh pr edit $PR_NUM --add-label "validation-failed"
              continue
            fi
            echo "‚úÖ Validation PASSED: Single file change in the correct directory."
            
            # --- VALIDATION 4: Check if the file is valid JSON ---
            # Checkout the PR branch to get the file content
            gh pr checkout $PR_NUM
            if ! jq '.' "$FILES_CHANGED" > /dev/null 2>&1; then
                echo "Validation FAILED: File '$FILES_CHANGED' is not valid JSON."
                gh pr comment $PR_NUM --body "‚ùå **Validation Failed:** The file \`$FILES_CHANGED\` does not contain valid JSON."
                gh pr edit $PR_NUM --add-label "validation-failed"
                # Switch back to the main branch before continuing
                git checkout -
                continue
            fi
            # Switch back to the main branch
            git checkout -
            echo "‚úÖ Validation PASSED: File contains valid JSON."


            # --- ALL CHECKS PASSED: MERGE THE PR ---
            echo "All validations passed for PR #$PR_NUM. Merging..."
            gh pr comment $PR_NUM --body "‚úÖ **Validation Passed:** All checks are green. Merging into the Enhansome Index."
            gh pr merge $PR_NUM --rebase --delete-branch
            echo "PR #$PR_NUM merged successfully."
          done
          echo "---"
          echo "All PRs processed."